{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uBC31\\uC9C0\\uC724\\\\Desktop\\\\React\\\\mbti\\\\aprime\\\\src\\\\components\\\\Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../Question.css\";\nimport { TiArrowLeft } from \"react-icons/ti\";\nimport Parser from \"html-react-parser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var ProgressBar = ({\n  width,\n  percent\n}) => {\n  let progress = 0.01 * percent * width;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-div\",\n    style: {\n      width: width\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `${progress}px`\n      },\n      className: \"progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = ProgressBar;\n\nconst Question = ({\n  Finish,\n  data,\n  answers,\n  onAnswerUpdate,\n  numberOfQuestions,\n  activeQuestion,\n  onSetActiveQuestion,\n  onSetStep\n}) => {\n  _s();\n\n  const [percent, setPercent] = useState(100 / 12);\n  const mobileWidth = 500;\n  React.useEffect(() => {\n    const onResize = () => {\n      const zoom = Math.min(window.innerWidth / mobileWidth, 1);\n      document.documentElement.style.zoom = `${zoom}`;\n    };\n\n    onResize();\n    window.addEventListener(\"resize\", onResize);\n    return () => window.removeEventListener(\"resize\", onResize);\n  }, []);\n\n  const prevClickHandler = () => {\n    if (activeQuestion > 0) {\n      onSetActiveQuestion(activeQuestion - 1);\n      setPercent(percent - 100 / 11);\n      onAnswerUpdate(prevState => [...prevState.slice(0, prevState.length - 1)]);\n    } else {\n      onSetStep(1);\n    }\n  };\n\n  const nextClickHandler = i => {\n    onAnswerUpdate(prevState => [...prevState, i]);\n    setPercent(percent + 100 / 12);\n\n    if (activeQuestion < numberOfQuestions - 1) {\n      onSetActiveQuestion(activeQuestion + 1);\n    } else {\n      onSetStep(20);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"logo\",\n        children: \"a prime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prevButton\",\n        onClick: () => prevClickHandler(),\n        children: [/*#__PURE__*/_jsxDEV(TiArrowLeft, {\n          className: \"back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), \"\\uC774\\uC804\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), data.question.split(\"N\").map(line => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"question\",\n          children: line\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 18\n        }, this);\n      }), data.choices.map((choice, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `btn_${i}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: () => nextClickHandler(i),\n          children: Parser(choice)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        className: \"footer\",\n        width: 350,\n        percent: percent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Question, \"g04UvBSYxKsZ3R8w16A87qsuGYA=\");\n\n_c2 = Question;\nexport default Question;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProgressBar\");\n$RefreshReg$(_c2, \"Question\");","map":{"version":3,"sources":["C:/Users/백지윤/Desktop/React/mbti/aprime/src/components/Question.js"],"names":["React","useState","useEffect","useRef","TiArrowLeft","Parser","ProgressBar","width","percent","progress","Question","Finish","data","answers","onAnswerUpdate","numberOfQuestions","activeQuestion","onSetActiveQuestion","onSetStep","setPercent","mobileWidth","onResize","zoom","Math","min","window","innerWidth","document","documentElement","style","addEventListener","removeEventListener","prevClickHandler","prevState","slice","length","nextClickHandler","i","question","split","map","line","choices","choice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../Question.css\";\r\nimport { TiArrowLeft } from \"react-icons/ti\";\r\nimport Parser from \"html-react-parser\";\r\n\r\nexport var ProgressBar = ({ width, percent }) => {\r\n  let progress = 0.01 * percent * width;\r\n\r\n  return (\r\n    <div className=\"progress-div\" style={{ width: width }}>\r\n      <div style={{ width: `${progress}px` }} className=\"progress\" />\r\n    </div>\r\n  );\r\n};\r\nconst Question = ({\r\n  Finish,\r\n  data,\r\n  answers,\r\n  onAnswerUpdate,\r\n  numberOfQuestions,\r\n  activeQuestion,\r\n  onSetActiveQuestion,\r\n  onSetStep,\r\n}) => {\r\n  const [percent, setPercent] = useState(100 / 12);\r\n\r\n  const mobileWidth = 500;\r\n  React.useEffect(() => {\r\n    const onResize = () => {\r\n      const zoom = Math.min(window.innerWidth / mobileWidth, 1);\r\n      document.documentElement.style.zoom = `${zoom}`;\r\n    };\r\n    onResize();\r\n    window.addEventListener(\"resize\", onResize);\r\n    return () => window.removeEventListener(\"resize\", onResize);\r\n  }, []);\r\n\r\n  const prevClickHandler = () => {\r\n    if (activeQuestion > 0) {\r\n      onSetActiveQuestion(activeQuestion - 1);\r\n      setPercent(percent - 100 / 11);\r\n      onAnswerUpdate((prevState) => [\r\n        ...prevState.slice(0, prevState.length - 1),\r\n      ]);\r\n    } else {\r\n      onSetStep(1);\r\n    }\r\n  };\r\n\r\n  const nextClickHandler = (i) => {\r\n    onAnswerUpdate((prevState) => [...prevState, i]);\r\n    setPercent(percent + 100 / 12);\r\n    if (activeQuestion < numberOfQuestions - 1) {\r\n      onSetActiveQuestion(activeQuestion + 1);\r\n    } else {\r\n      onSetStep(20);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"outer\">\r\n      <div className=\"inner\">\r\n        <p className=\"logo\">a prime</p>\r\n        <button className=\"prevButton\" onClick={() => prevClickHandler()}>\r\n          <TiArrowLeft className=\"back\" />\r\n          이전\r\n        </button>\r\n        {data.question.split(\"N\").map((line) => {\r\n          return <span className=\"question\">{line}</span>;\r\n        })}\r\n        {data.choices.map((choice, i) => (\r\n          <div className={`btn_${i}`}>\r\n            <button className=\"button\" onClick={() => nextClickHandler(i)}>\r\n              {Parser(choice)}\r\n            </button>\r\n          </div>\r\n        ))}\r\n        {/* {data.footer.map((line) => (\r\n          <p className=\"question\">{line}</p>\r\n        ))} */}\r\n        <ProgressBar className=\"footer\" width={350} percent={percent} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}