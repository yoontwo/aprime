{"ast":null,"code":"import React from 'react';\nimport defaultMessages from '../../languages/default.json'; // options:\n//   id: message id\n//   messages: (optional) an object of message overrides\n//   values: (optional) currently unused but in the future\n//     will be an object with substitution values for\n//     positional variables in the message text.\n//   defaultMessage: (optional) default message to use if\n//     the message isn't found elsewhere.\n\nvar _format = function format(options, messages) {\n  var _options$id; // Message id's are hierarchical. For the component-specific\n  // message objects passed as options.messages, just use the last\n  // component in the id for backwards compatibility.\n  //\n  // For overall messages passed to grommet, use the hierarchical\n  // id. For that messages object, the messages are in an object\n  // hierarchy by component, similar to how the theme works.\n  //\n  // Applications that typically keep their messages in flat\n  // objects with a single key string per message can override\n  // this format function to get the grommet messages from\n  // their bundles that way and don't need to pass the messages\n  // themselves in this property, just the format function.\n\n\n  var idParts = ((_options$id = options.id) == null ? void 0 : _options$id.split('.')) || [];\n  var baseId = idParts[(idParts == null ? void 0 : idParts.length) - 1];\n  var messageObj = messages;\n  idParts.forEach(function (idPart) {\n    if (typeof messageObj === 'object') {\n      messageObj = messageObj[idPart];\n    }\n  });\n  var message = (options.messages ? options.messages[baseId] : undefined) || messageObj || options.defaultMessage;\n  var values = options.values;\n  var newMessage = message;\n  var tokens = message == null ? void 0 : message.match(/\\{(.+?)\\}/g);\n  tokens == null ? void 0 : tokens.forEach(function (token) {\n    var names = token.substr(1, token.length - 2);\n    var value = values[names];\n    newMessage = newMessage.replace(token, value);\n  });\n  return values ? newMessage : message;\n};\n\nexport { _format as format };\nvar defaultValue = {\n  messages: defaultMessages,\n  format: function format(options) {\n    return _format(options, defaultMessages);\n  }\n};\nexport var MessageContext = /*#__PURE__*/React.createContext(defaultValue);","map":{"version":3,"sources":["C:/Users/백지윤/Desktop/React/mbti/aprime/node_modules/grommet/es6/contexts/MessageContext/MessageContext.js"],"names":["React","defaultMessages","_format","format","options","messages","_options$id","idParts","id","split","baseId","length","messageObj","forEach","idPart","message","undefined","defaultMessage","values","newMessage","tokens","match","token","names","substr","value","replace","defaultValue","MessageContext","createContext"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,8BAA5B,C,CAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GAAG,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,QAAzB,EAAmC;AAC/C,MAAIC,WAAJ,CAD+C,CAG/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIC,OAAO,GAAG,CAAC,CAACD,WAAW,GAAGF,OAAO,CAACI,EAAvB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8CF,WAAW,CAACG,KAAZ,CAAkB,GAAlB,CAA/C,KAA0E,EAAxF;AACA,MAAIC,MAAM,GAAGH,OAAO,CAAC,CAACA,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACI,MAApC,IAA8C,CAA/C,CAApB;AACA,MAAIC,UAAU,GAAGP,QAAjB;AACAE,EAAAA,OAAO,CAACM,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChC,QAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,MAAAA,UAAU,GAAGA,UAAU,CAACE,MAAD,CAAvB;AACD;AACF,GAJD;AAKA,MAAIC,OAAO,GAAG,CAACX,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,CAAiBK,MAAjB,CAAnB,GAA8CM,SAA/C,KAA6DJ,UAA7D,IAA2ER,OAAO,CAACa,cAAjG;AACA,MAAIC,MAAM,GAAGd,OAAO,CAACc,MAArB;AACA,MAAIC,UAAU,GAAGJ,OAAjB;AACA,MAAIK,MAAM,GAAGL,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACM,KAAR,CAAc,YAAd,CAAxC;AACAD,EAAAA,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACP,OAAP,CAAe,UAAUS,KAAV,EAAiB;AACxD,QAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBF,KAAK,CAACX,MAAN,GAAe,CAA/B,CAAZ;AACA,QAAIc,KAAK,GAAGP,MAAM,CAACK,KAAD,CAAlB;AACAJ,IAAAA,UAAU,GAAGA,UAAU,CAACO,OAAX,CAAmBJ,KAAnB,EAA0BG,KAA1B,CAAb;AACD,GAJyB,CAA1B;AAKA,SAAOP,MAAM,GAAGC,UAAH,GAAgBJ,OAA7B;AACD,CAlCD;;AAoCA,SAASb,OAAO,IAAIC,MAApB;AACA,IAAIwB,YAAY,GAAG;AACjBtB,EAAAA,QAAQ,EAAEJ,eADO;AAEjBE,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;AAC/B,WAAOF,OAAO,CAACE,OAAD,EAAUH,eAAV,CAAd;AACD;AAJgB,CAAnB;AAMA,OAAO,IAAI2B,cAAc,GAAG,aAAa5B,KAAK,CAAC6B,aAAN,CAAoBF,YAApB,CAAlC","sourcesContent":["import React from 'react';\nimport defaultMessages from '../../languages/default.json'; // options:\n//   id: message id\n//   messages: (optional) an object of message overrides\n//   values: (optional) currently unused but in the future\n//     will be an object with substitution values for\n//     positional variables in the message text.\n//   defaultMessage: (optional) default message to use if\n//     the message isn't found elsewhere.\n\nvar _format = function format(options, messages) {\n  var _options$id;\n\n  // Message id's are hierarchical. For the component-specific\n  // message objects passed as options.messages, just use the last\n  // component in the id for backwards compatibility.\n  //\n  // For overall messages passed to grommet, use the hierarchical\n  // id. For that messages object, the messages are in an object\n  // hierarchy by component, similar to how the theme works.\n  //\n  // Applications that typically keep their messages in flat\n  // objects with a single key string per message can override\n  // this format function to get the grommet messages from\n  // their bundles that way and don't need to pass the messages\n  // themselves in this property, just the format function.\n  var idParts = ((_options$id = options.id) == null ? void 0 : _options$id.split('.')) || [];\n  var baseId = idParts[(idParts == null ? void 0 : idParts.length) - 1];\n  var messageObj = messages;\n  idParts.forEach(function (idPart) {\n    if (typeof messageObj === 'object') {\n      messageObj = messageObj[idPart];\n    }\n  });\n  var message = (options.messages ? options.messages[baseId] : undefined) || messageObj || options.defaultMessage;\n  var values = options.values;\n  var newMessage = message;\n  var tokens = message == null ? void 0 : message.match(/\\{(.+?)\\}/g);\n  tokens == null ? void 0 : tokens.forEach(function (token) {\n    var names = token.substr(1, token.length - 2);\n    var value = values[names];\n    newMessage = newMessage.replace(token, value);\n  });\n  return values ? newMessage : message;\n};\n\nexport { _format as format };\nvar defaultValue = {\n  messages: defaultMessages,\n  format: function format(options) {\n    return _format(options, defaultMessages);\n  }\n};\nexport var MessageContext = /*#__PURE__*/React.createContext(defaultValue);"]},"metadata":{},"sourceType":"module"}