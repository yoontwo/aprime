{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uBC31\\uC9C0\\uC724\\\\Desktop\\\\React\\\\mbti\\\\src\\\\components\\\\Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Question = ({\n  data,\n  onAnswerUpdate,\n  numberOfQuestions,\n  activeQuestion,\n  onSetActiveQuestion,\n  onSetStep\n}) => {\n  _s();\n\n  const [selected, setSelected] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const radiosWrapper = useRef();\n\n  const changeHandler = e => {\n    setSelected(e.target.value);\n  };\n\n  const nextClickHandler = e => {\n    onAnswerUpdate(prevState => [...prevState, {\n      q: data.question,\n      a: selected\n    }]);\n    setSelected(\"\");\n\n    if (activeQuestion < numberOfQuestions - 1) {\n      onSetActiveQuestion(activeQuestion + 1);\n    } else {\n      onSetStep(3);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", data.question, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), data.choices.map(choice => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextClickHandler,\n        children: choice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: onAnswerUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Question, \"T0T0yDb0MV5xqb4U7uhwBTIuPHE=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/백지윤/Desktop/React/mbti/src/components/Question.js"],"names":["React","useState","useEffect","useRef","Question","data","onAnswerUpdate","numberOfQuestions","activeQuestion","onSetActiveQuestion","onSetStep","selected","setSelected","error","setError","radiosWrapper","changeHandler","e","target","value","nextClickHandler","prevState","q","question","a","choices","map","choice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,IADgB;AAEhBC,EAAAA,cAFgB;AAGhBC,EAAAA,iBAHgB;AAIhBC,EAAAA,cAJgB;AAKhBC,EAAAA,mBALgB;AAMhBC,EAAAA;AANgB,CAAD,KAOX;AAAA;;AACJ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMc,aAAa,GAAGZ,MAAM,EAA5B;;AAEA,QAAMa,aAAa,GAAIC,CAAD,IAAO;AAC3BL,IAAAA,WAAW,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,GAFD;;AAGA,QAAMC,gBAAgB,GAAIH,CAAD,IAAO;AAC9BX,IAAAA,cAAc,CAAEe,SAAD,IAAe,CAC5B,GAAGA,SADyB,EAE5B;AAAEC,MAAAA,CAAC,EAAEjB,IAAI,CAACkB,QAAV;AAAoBC,MAAAA,CAAC,EAAEb;AAAvB,KAF4B,CAAhB,CAAd;AAIAC,IAAAA,WAAW,CAAC,EAAD,CAAX;;AACA,QAAIJ,cAAc,GAAGD,iBAAiB,GAAG,CAAzC,EAA4C;AAC1CE,MAAAA,mBAAmB,CAACD,cAAc,GAAG,CAAlB,CAAnB;AACD,KAFD,MAEO;AACLE,MAAAA,SAAS,CAAC,CAAD,CAAT;AACD;AACF,GAXD;;AAaA,sBACE;AAAA,4BACE;AAAA,sBAAML,IAAI,CAACkB,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGlB,IAAI,CAACoB,OAAL,CAAaC,GAAb,CAAkBC,MAAD,iBAChB;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAEP,gBAAjB;AAAA,kBAAoCO;AAApC;AAAA;AAAA;AAAA;AAAA,cADF,EACuD,GADvD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,CAFH,eAOE;AAAA,gBAAIrB;AAAJ;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAvCD;;GAAMF,Q;;KAAAA,Q;AAyCN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Question = ({\r\n  data,\r\n  onAnswerUpdate,\r\n  numberOfQuestions,\r\n  activeQuestion,\r\n  onSetActiveQuestion,\r\n  onSetStep,\r\n}) => {\r\n  const [selected, setSelected] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const radiosWrapper = useRef();\r\n\r\n  const changeHandler = (e) => {\r\n    setSelected(e.target.value);\r\n  };\r\n  const nextClickHandler = (e) => {\r\n    onAnswerUpdate((prevState) => [\r\n      ...prevState,\r\n      { q: data.question, a: selected },\r\n    ]);\r\n    setSelected(\"\");\r\n    if (activeQuestion < numberOfQuestions - 1) {\r\n      onSetActiveQuestion(activeQuestion + 1);\r\n    } else {\r\n      onSetStep(3);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2> {data.question} </h2>\r\n      {data.choices.map((choice) => (\r\n        <ul>\r\n          <button onClick={nextClickHandler}>{choice}</button>{\" \"}\r\n        </ul>\r\n      ))}\r\n      <p>{onAnswerUpdate}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}