{"ast":null,"code":"import React, { useContext, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { parseMetricToNum } from '../../utils';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { Box } from '../Box';\nimport { Stack } from '../Stack';\nimport { Text } from '../Text';\nvar StyledBadgeContainer = styled(Box).withConfig({\n  displayName: \"Badge__StyledBadgeContainer\",\n  componentId: \"sc-1es4ws1-0\"\n})([\"\", \"\"], function (props) {\n  return props.theme.button.badge.container.extend;\n});\nexport var Badge = function Badge(_ref) {\n  var children = _ref.children,\n      content = _ref.content;\n  var theme = useContext(ThemeContext);\n  var contentRef = useRef();\n  var stackRef = useRef();\n  var defaultBadgeDimension = typeof content === 'boolean' || content && content.value && typeof content.value === 'boolean' ? // empty badge should be smaller. this value was chosen as a default\n  // after experimenting with various values\n  parseMetricToNum(theme.button.badge.size.medium) / 2 + \"px\" : theme.button.badge.size.medium; // size should drive height, match width to height by default\n  // allow width to grow when content is wide\n\n  var _useState = useState(defaultBadgeDimension),\n      height = _useState[0],\n      setHeight = _useState[1];\n\n  var _useState2 = useState(height),\n      width = _useState2[0],\n      setWidth = _useState2[1]; // scale badge to fit its contents, leaving space horizontally\n  // that is proportional to vertical space\n\n\n  useLayoutEffect(function () {\n    // when window resizes and hits a responsive breakpoint, width of the badge\n    // can change (because pad is responsive, etc.). we want to recalculate\n    // width since badge offset is reliant on its dimensions.\n    var onResize = function onResize() {\n      if (contentRef && contentRef.current) {\n        if (typeof content === 'number' || typeof content === 'object' && content.value) {\n          var _contentRef$current$g = contentRef.current.getBoundingClientRect(),\n              contentHeight = _contentRef$current$g.height,\n              contentWidth = _contentRef$current$g.width; // only adjust the width if contentHeight > 0\n          // jest returns 0 for all getBoundingClientRect values,\n          // so this ensures snapshots are closer to correct values\n\n\n          if (contentHeight) {\n            // height of content includes extra space around font from\n            // line-height. account for this extra space with 2.5 multiplier\n            // to add proportional horizontal space\n            var verticalSpace = (parseMetricToNum(height) - contentHeight) * 2.5;\n            setWidth(Math.max(parseMetricToNum(width), Math.ceil(contentWidth + verticalSpace)) + \"px\");\n          }\n        } else {\n          // caller has provided custom JSX\n          setWidth(contentRef.current.getBoundingClientRect().width + \"px\");\n          setHeight(contentRef.current.getBoundingClientRect().height + \"px\");\n        }\n      }\n    };\n\n    window.addEventListener('resize', onResize);\n    onResize();\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [content, height, width]); // offset the badge so it overlaps content\n\n  useLayoutEffect(function () {\n    if (stackRef && stackRef.current) {\n      // when badge has content, offset should be 50%.\n      // when badge is empty, offset by a smaller amount to keep the badge\n      // closer to the content. this value was chosen as a reasonable default\n      // after testing with various grommet icons.\n      var divisor = typeof content === 'boolean' || content && content.value === true ? 3.5 : 2;\n      var offset = {\n        right: \"-\" + Math.round(parseMetricToNum(width) / divisor) + \"px\",\n        top: \"-\" + Math.round(parseMetricToNum(height) / divisor) + \"px\"\n      }; // second child of Stack is the div that receives absolute positioning\n      // and contains our badge content\n\n      stackRef.current.children[1].style.top = offset.top;\n      stackRef.current.children[1].style.right = offset.right;\n    }\n  }, [content, height, width]);\n  var value;\n  if (typeof content === 'number') value = content;else if (typeof content === 'object') value = content.value;\n  var badge;\n\n  if (typeof value === 'number' || typeof value === 'boolean' || typeof content === 'boolean') {\n    if (typeof value === 'number') {\n      var max = content.max || 9;\n      badge = /*#__PURE__*/React.createElement(Text, {\n        color: \"text-strong\",\n        size: theme.button.badge.text.size.medium,\n        weight: \"normal\",\n        ref: contentRef\n      }, value > max ? max + \"+\" : value);\n    }\n\n    badge = /*#__PURE__*/React.createElement(StyledBadgeContainer, {\n      align: \"center\",\n      background: content.background || theme.button.badge.container.background,\n      flex: false,\n      height: {\n        min: height\n      },\n      justify: \"center\",\n      round: true,\n      pad: !(typeof value === 'boolean' || typeof content === 'boolean') ? theme.button.badge.container.pad : undefined,\n      width: {\n        min: width\n      }\n    }, badge); // caller has provided their own JSX and we will just render that\n  } else badge = /*#__PURE__*/React.createElement(Box, {\n    ref: contentRef\n  }, content);\n\n  return /*#__PURE__*/React.createElement(Stack, {\n    ref: stackRef,\n    anchor: \"top-right\"\n  }, children, badge);\n};","map":{"version":3,"sources":["C:/Users/백지윤/Desktop/React/mbti/node_modules/grommet/es6/components/Button/Badge.js"],"names":["React","useContext","useRef","useState","styled","ThemeContext","parseMetricToNum","useLayoutEffect","Box","Stack","Text","StyledBadgeContainer","withConfig","displayName","componentId","props","theme","button","badge","container","extend","Badge","_ref","children","content","contentRef","stackRef","defaultBadgeDimension","value","size","medium","_useState","height","setHeight","_useState2","width","setWidth","onResize","current","_contentRef$current$g","getBoundingClientRect","contentHeight","contentWidth","verticalSpace","Math","max","ceil","window","addEventListener","removeEventListener","divisor","offset","right","round","top","style","createElement","color","text","weight","ref","align","background","flex","min","justify","pad","undefined","anchor"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { parseMetricToNum } from '../../utils';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { Box } from '../Box';\nimport { Stack } from '../Stack';\nimport { Text } from '../Text';\nvar StyledBadgeContainer = styled(Box).withConfig({\n  displayName: \"Badge__StyledBadgeContainer\",\n  componentId: \"sc-1es4ws1-0\"\n})([\"\", \"\"], function (props) {\n  return props.theme.button.badge.container.extend;\n});\nexport var Badge = function Badge(_ref) {\n  var children = _ref.children,\n      content = _ref.content;\n  var theme = useContext(ThemeContext);\n  var contentRef = useRef();\n  var stackRef = useRef();\n  var defaultBadgeDimension = typeof content === 'boolean' || content && content.value && typeof content.value === 'boolean' ? // empty badge should be smaller. this value was chosen as a default\n  // after experimenting with various values\n  parseMetricToNum(theme.button.badge.size.medium) / 2 + \"px\" : theme.button.badge.size.medium; // size should drive height, match width to height by default\n  // allow width to grow when content is wide\n\n  var _useState = useState(defaultBadgeDimension),\n      height = _useState[0],\n      setHeight = _useState[1];\n\n  var _useState2 = useState(height),\n      width = _useState2[0],\n      setWidth = _useState2[1]; // scale badge to fit its contents, leaving space horizontally\n  // that is proportional to vertical space\n\n\n  useLayoutEffect(function () {\n    // when window resizes and hits a responsive breakpoint, width of the badge\n    // can change (because pad is responsive, etc.). we want to recalculate\n    // width since badge offset is reliant on its dimensions.\n    var onResize = function onResize() {\n      if (contentRef && contentRef.current) {\n        if (typeof content === 'number' || typeof content === 'object' && content.value) {\n          var _contentRef$current$g = contentRef.current.getBoundingClientRect(),\n              contentHeight = _contentRef$current$g.height,\n              contentWidth = _contentRef$current$g.width; // only adjust the width if contentHeight > 0\n          // jest returns 0 for all getBoundingClientRect values,\n          // so this ensures snapshots are closer to correct values\n\n\n          if (contentHeight) {\n            // height of content includes extra space around font from\n            // line-height. account for this extra space with 2.5 multiplier\n            // to add proportional horizontal space\n            var verticalSpace = (parseMetricToNum(height) - contentHeight) * 2.5;\n            setWidth(Math.max(parseMetricToNum(width), Math.ceil(contentWidth + verticalSpace)) + \"px\");\n          }\n        } else {\n          // caller has provided custom JSX\n          setWidth(contentRef.current.getBoundingClientRect().width + \"px\");\n          setHeight(contentRef.current.getBoundingClientRect().height + \"px\");\n        }\n      }\n    };\n\n    window.addEventListener('resize', onResize);\n    onResize();\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [content, height, width]); // offset the badge so it overlaps content\n\n  useLayoutEffect(function () {\n    if (stackRef && stackRef.current) {\n      // when badge has content, offset should be 50%.\n      // when badge is empty, offset by a smaller amount to keep the badge\n      // closer to the content. this value was chosen as a reasonable default\n      // after testing with various grommet icons.\n      var divisor = typeof content === 'boolean' || content && content.value === true ? 3.5 : 2;\n      var offset = {\n        right: \"-\" + Math.round(parseMetricToNum(width) / divisor) + \"px\",\n        top: \"-\" + Math.round(parseMetricToNum(height) / divisor) + \"px\"\n      }; // second child of Stack is the div that receives absolute positioning\n      // and contains our badge content\n\n      stackRef.current.children[1].style.top = offset.top;\n      stackRef.current.children[1].style.right = offset.right;\n    }\n  }, [content, height, width]);\n  var value;\n  if (typeof content === 'number') value = content;else if (typeof content === 'object') value = content.value;\n  var badge;\n\n  if (typeof value === 'number' || typeof value === 'boolean' || typeof content === 'boolean') {\n    if (typeof value === 'number') {\n      var max = content.max || 9;\n      badge = /*#__PURE__*/React.createElement(Text, {\n        color: \"text-strong\",\n        size: theme.button.badge.text.size.medium,\n        weight: \"normal\",\n        ref: contentRef\n      }, value > max ? max + \"+\" : value);\n    }\n\n    badge = /*#__PURE__*/React.createElement(StyledBadgeContainer, {\n      align: \"center\",\n      background: content.background || theme.button.badge.container.background,\n      flex: false,\n      height: {\n        min: height\n      },\n      justify: \"center\",\n      round: true,\n      pad: !(typeof value === 'boolean' || typeof content === 'boolean') ? theme.button.badge.container.pad : undefined,\n      width: {\n        min: width\n      }\n    }, badge); // caller has provided their own JSX and we will just render that\n  } else badge = /*#__PURE__*/React.createElement(Box, {\n    ref: contentRef\n  }, content);\n\n  return /*#__PURE__*/React.createElement(Stack, {\n    ref: stackRef,\n    anchor: \"top-right\"\n  }, children, badge);\n};"]},"metadata":{},"sourceType":"module"}