{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n} // Converting between Date and String types is handled via a \"schema\".\n// The schema is an array of strings, split into strings with identical\n// characters. So, 'mm/dd/yyyy' will be ['mm', '/', 'dd', '/', 'yyyyy'].\n\n\nexport var formatToSchema = function formatToSchema(format) {\n  if (!format) return undefined;\n  var result = [];\n  var i = 0;\n  var part;\n\n  while (i < format.length) {\n    if (!part || part[0] !== format[i]) {\n      if (part) result.push(part);\n      part = format[i];\n    } else {\n      part += format[i];\n    }\n\n    i += 1;\n  }\n\n  if (part) result.push(part);\n  return result;\n};\nvar masks = {\n  m: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[1-9]$|^1[0-2]$\")\n  },\n  mm: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[0-1]$|^0[1-9]$|^1[0-2]$\")\n  },\n  d: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[1-9]$|^[1-2][0-9]$|^3[0-1]$\")\n  },\n  dd: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[0-3]$|^0[1-9]$|^[1-2][0-9]$|^3[0-1]$\")\n  },\n  yy: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[0-9]{1,2}$\")\n  },\n  yyyy: {\n    length: [1, 4],\n    regexp: new RegExp(\"^[0-9]{1,4}$\")\n  }\n};\nexport var schemaToMask = function schemaToMask(schema) {\n  if (!schema) return undefined;\n  return schema.map(function (part) {\n    var lower = part.toLowerCase();\n    var _char = lower[0];\n    if (_char === 'm' || _char === 'd' || _char === 'y') return _extends({\n      placeholder: part\n    }, masks[lower]);\n    return {\n      fixed: part\n    };\n  });\n}; // convert value into text representation using the schema\n\nexport var valueToText = function valueToText(value, schema) {\n  var text = ''; // when user initializes dates as empty array, we want to still\n  // show the placeholder text\n\n  if (!value || Array.isArray(value) && !value.length) return text;\n  var dates = (Array.isArray(value) ? value : [value]).map(function (v) {\n    return new Date(v);\n  });\n  var dateIndex = 0;\n  var parts = {};\n  schema.every(function (part) {\n    var _char2 = part[0].toLowerCase(); // advance dateIndex if we already have this part\n\n\n    while (dateIndex < dates.length && (Number.isNaN(dates[dateIndex].date) || (_char2 === 'm' || _char2 === 'd' || _char2 === 'y') && parts[part])) {\n      dateIndex += 1;\n      parts = {};\n    }\n\n    var date = dates[dateIndex];\n\n    if (date && part === 'm') {\n      text += date.getMonth() + 1;\n      parts[part] = true;\n    } else if (date && part === 'mm') {\n      text += (\"0\" + (date.getMonth() + 1)).slice(-2);\n      parts[part] = true;\n    } else if (date && part === 'd') {\n      text += date.getDate();\n      parts[part] = true;\n    } else if (date && part === 'dd') {\n      text += (\"0\" + date.getDate()).slice(-2);\n      parts[part] = true;\n    } else if (date && part === 'yy') {\n      text += date.getFullYear().toString().slice(-2);\n      parts[part] = true;\n    } else if (date && part === 'yyyy') {\n      text += date.getFullYear();\n      parts[part] = true;\n    } else if (!date && (part[0] === 'm' || part[0] === 'd' || part[0] === 'y')) {\n      return false;\n    } else {\n      text += part;\n    }\n\n    return true;\n  });\n  return text;\n};\nvar charCodeZero = '0'.charCodeAt(0);\nvar charCodeNine = '9'.charCodeAt(0);\n\nvar pullDigits = function pullDigits(text, index) {\n  var end = index;\n\n  while (text.charCodeAt(end) >= charCodeZero && text.charCodeAt(end) <= charCodeNine) {\n    end += 1;\n  }\n\n  return text.slice(index, end);\n};\n\nexport var textToValue = function textToValue(text, schema, valueProp, range) {\n  if (!text) return range ? [] : undefined;\n  var result;\n\n  var addDate = function addDate(parts) {\n    // Do a little sanity checking on the parts first.\n    // If not valid, leave as is.\n    if (!parts.m || !parts.d || !parts.y || parts.y.length < 4 || parts.m.length > 2 || parts.d.length > 2 || parts.m > 12 || parts.d > 31) return parts;\n    var date = new Date(parts.y, parts.m - 1, parts.d).toISOString(); // match time and timezone of any supplied valueProp\n\n    if (valueProp && (Array.isArray(valueProp) && valueProp[0] || !Array.isArray(valueProp))) {\n      var valueDate = new Date(Array.isArray(valueProp) && valueProp.length ? valueProp[0] : valueProp).toISOString();\n      date = date.split('T')[0] + \"T\" + valueDate.split('T')[1];\n    }\n\n    if (!range) {\n      if (!result) result = date;\n    } else {\n      if (!result) result = [];\n      result.push(date);\n    } // we've consumed these parts, return an empty object in case we need\n    // to start building up another one for a range\n\n\n    return {};\n  };\n\n  var parts = {};\n  var index = 0;\n  schema.forEach(function (part) {\n    if (index < text.length) {\n      var lower = part.toLowerCase();\n      var _char3 = lower[0];\n      if (parts[_char3] !== undefined) parts = addDate(parts);\n\n      if (_char3 === 'm') {\n        parts.m = pullDigits(text, index);\n        index += parts.m.length;\n      } else if (_char3 === 'd') {\n        parts.d = pullDigits(text, index);\n        index += parts.d.length;\n      } else if (_char3 === 'y') {\n        parts.y = pullDigits(text, index);\n        index += parts.y.length;\n\n        if (lower === 'yy' && parts.y.length === 2) {\n          // convert to full year, pivot at 69 based on POSIX strptime()\n          parts.y = \"\" + (parts.y < 69 ? 20 : 19) + parts.y;\n        }\n      } else if (text.slice(index, index + part.length) === part) {\n        index += part.length;\n      } else {\n        // syntax error\n        index = text.length;\n        result = undefined;\n      }\n    }\n  });\n  parts = addDate(parts);\n  if (!result) return range ? [] : undefined;\n  return result;\n};\nexport var valuesAreEqual = function valuesAreEqual(value1, value2) {\n  return Array.isArray(value1) && Array.isArray(value2) && value1.every(function (d1, i) {\n    return d1 === value2[i];\n  }) || value1 === value2;\n};","map":{"version":3,"sources":["C:/Users/백지윤/Desktop/React/mbti/aprime/node_modules/grommet/es6/components/DateInput/utils.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","formatToSchema","format","undefined","result","part","push","masks","m","regexp","RegExp","mm","d","dd","yy","yyyy","schemaToMask","schema","map","lower","toLowerCase","_char","placeholder","fixed","valueToText","value","text","Array","isArray","dates","v","Date","dateIndex","parts","every","_char2","Number","isNaN","date","getMonth","slice","getDate","getFullYear","toString","charCodeZero","charCodeAt","charCodeNine","pullDigits","index","end","textToValue","valueProp","range","addDate","y","toISOString","valueDate","split","forEach","_char3","valuesAreEqual","value1","value2","d1"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// Converting between Date and String types is handled via a \"schema\".\n// The schema is an array of strings, split into strings with identical\n// characters. So, 'mm/dd/yyyy' will be ['mm', '/', 'dd', '/', 'yyyyy'].\nexport var formatToSchema = function formatToSchema(format) {\n  if (!format) return undefined;\n  var result = [];\n  var i = 0;\n  var part;\n\n  while (i < format.length) {\n    if (!part || part[0] !== format[i]) {\n      if (part) result.push(part);\n      part = format[i];\n    } else {\n      part += format[i];\n    }\n\n    i += 1;\n  }\n\n  if (part) result.push(part);\n  return result;\n};\nvar masks = {\n  m: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[1-9]$|^1[0-2]$\")\n  },\n  mm: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[0-1]$|^0[1-9]$|^1[0-2]$\")\n  },\n  d: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[1-9]$|^[1-2][0-9]$|^3[0-1]$\")\n  },\n  dd: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[0-3]$|^0[1-9]$|^[1-2][0-9]$|^3[0-1]$\")\n  },\n  yy: {\n    length: [1, 2],\n    regexp: new RegExp(\"^[0-9]{1,2}$\")\n  },\n  yyyy: {\n    length: [1, 4],\n    regexp: new RegExp(\"^[0-9]{1,4}$\")\n  }\n};\nexport var schemaToMask = function schemaToMask(schema) {\n  if (!schema) return undefined;\n  return schema.map(function (part) {\n    var lower = part.toLowerCase();\n    var _char = lower[0];\n    if (_char === 'm' || _char === 'd' || _char === 'y') return _extends({\n      placeholder: part\n    }, masks[lower]);\n    return {\n      fixed: part\n    };\n  });\n}; // convert value into text representation using the schema\n\nexport var valueToText = function valueToText(value, schema) {\n  var text = ''; // when user initializes dates as empty array, we want to still\n  // show the placeholder text\n\n  if (!value || Array.isArray(value) && !value.length) return text;\n  var dates = (Array.isArray(value) ? value : [value]).map(function (v) {\n    return new Date(v);\n  });\n  var dateIndex = 0;\n  var parts = {};\n  schema.every(function (part) {\n    var _char2 = part[0].toLowerCase(); // advance dateIndex if we already have this part\n\n\n    while (dateIndex < dates.length && (Number.isNaN(dates[dateIndex].date) || (_char2 === 'm' || _char2 === 'd' || _char2 === 'y') && parts[part])) {\n      dateIndex += 1;\n      parts = {};\n    }\n\n    var date = dates[dateIndex];\n\n    if (date && part === 'm') {\n      text += date.getMonth() + 1;\n      parts[part] = true;\n    } else if (date && part === 'mm') {\n      text += (\"0\" + (date.getMonth() + 1)).slice(-2);\n      parts[part] = true;\n    } else if (date && part === 'd') {\n      text += date.getDate();\n      parts[part] = true;\n    } else if (date && part === 'dd') {\n      text += (\"0\" + date.getDate()).slice(-2);\n      parts[part] = true;\n    } else if (date && part === 'yy') {\n      text += date.getFullYear().toString().slice(-2);\n      parts[part] = true;\n    } else if (date && part === 'yyyy') {\n      text += date.getFullYear();\n      parts[part] = true;\n    } else if (!date && (part[0] === 'm' || part[0] === 'd' || part[0] === 'y')) {\n      return false;\n    } else {\n      text += part;\n    }\n\n    return true;\n  });\n  return text;\n};\nvar charCodeZero = '0'.charCodeAt(0);\nvar charCodeNine = '9'.charCodeAt(0);\n\nvar pullDigits = function pullDigits(text, index) {\n  var end = index;\n\n  while (text.charCodeAt(end) >= charCodeZero && text.charCodeAt(end) <= charCodeNine) {\n    end += 1;\n  }\n\n  return text.slice(index, end);\n};\n\nexport var textToValue = function textToValue(text, schema, valueProp, range) {\n  if (!text) return range ? [] : undefined;\n  var result;\n\n  var addDate = function addDate(parts) {\n    // Do a little sanity checking on the parts first.\n    // If not valid, leave as is.\n    if (!parts.m || !parts.d || !parts.y || parts.y.length < 4 || parts.m.length > 2 || parts.d.length > 2 || parts.m > 12 || parts.d > 31) return parts;\n    var date = new Date(parts.y, parts.m - 1, parts.d).toISOString(); // match time and timezone of any supplied valueProp\n\n    if (valueProp && (Array.isArray(valueProp) && valueProp[0] || !Array.isArray(valueProp))) {\n      var valueDate = new Date(Array.isArray(valueProp) && valueProp.length ? valueProp[0] : valueProp).toISOString();\n      date = date.split('T')[0] + \"T\" + valueDate.split('T')[1];\n    }\n\n    if (!range) {\n      if (!result) result = date;\n    } else {\n      if (!result) result = [];\n      result.push(date);\n    } // we've consumed these parts, return an empty object in case we need\n    // to start building up another one for a range\n\n\n    return {};\n  };\n\n  var parts = {};\n  var index = 0;\n  schema.forEach(function (part) {\n    if (index < text.length) {\n      var lower = part.toLowerCase();\n      var _char3 = lower[0];\n      if (parts[_char3] !== undefined) parts = addDate(parts);\n\n      if (_char3 === 'm') {\n        parts.m = pullDigits(text, index);\n        index += parts.m.length;\n      } else if (_char3 === 'd') {\n        parts.d = pullDigits(text, index);\n        index += parts.d.length;\n      } else if (_char3 === 'y') {\n        parts.y = pullDigits(text, index);\n        index += parts.y.length;\n\n        if (lower === 'yy' && parts.y.length === 2) {\n          // convert to full year, pivot at 69 based on POSIX strptime()\n          parts.y = \"\" + (parts.y < 69 ? 20 : 19) + parts.y;\n        }\n      } else if (text.slice(index, index + part.length) === part) {\n        index += part.length;\n      } else {\n        // syntax error\n        index = text.length;\n        result = undefined;\n      }\n    }\n  });\n  parts = addDate(parts);\n  if (!result) return range ? [] : undefined;\n  return result;\n};\nexport var valuesAreEqual = function valuesAreEqual(value1, value2) {\n  return Array.isArray(value1) && Array.isArray(value2) && value1.every(function (d1, i) {\n    return d1 === value2[i];\n  }) || value1 === value2;\n};"]},"metadata":{},"sourceType":"module"}